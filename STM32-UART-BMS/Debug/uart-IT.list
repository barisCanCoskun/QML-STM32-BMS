
uart-IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800444c  0800444c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004454  08004454  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800445c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  08004468  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004468  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9b9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9a  00000000  00000000  0002c9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002e690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026153  00000000  00000000  0002f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcad  00000000  00000000  00055a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea236  00000000  00000000  00061748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b97e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d0  00000000  00000000  0014b9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004338 	.word	0x08004338

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004338 	.word	0x08004338

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	data_buffer[++count] = rcvd_data;
 80004e4:	4b4b      	ldr	r3, [pc, #300]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	4a4a      	ldr	r2, [pc, #296]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 80004ec:	6013      	str	r3, [r2, #0]
 80004ee:	4b49      	ldr	r3, [pc, #292]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a49      	ldr	r2, [pc, #292]	; (8000618 <HAL_UART_RxCpltCallback+0x13c>)
 80004f4:	7811      	ldrb	r1, [r2, #0]
 80004f6:	4a49      	ldr	r2, [pc, #292]	; (800061c <HAL_UART_RxCpltCallback+0x140>)
 80004f8:	54d1      	strb	r1, [r2, r3]
	if(rcvd_data == '\r'){
 80004fa:	4b47      	ldr	r3, [pc, #284]	; (8000618 <HAL_UART_RxCpltCallback+0x13c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b0d      	cmp	r3, #13
 8000500:	d17e      	bne.n	8000600 <HAL_UART_RxCpltCallback+0x124>
		data_buffer[++count] = '\n';
 8000502:	4b44      	ldr	r3, [pc, #272]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	4a42      	ldr	r2, [pc, #264]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 800050a:	6013      	str	r3, [r2, #0]
 800050c:	4b41      	ldr	r3, [pc, #260]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a42      	ldr	r2, [pc, #264]	; (800061c <HAL_UART_RxCpltCallback+0x140>)
 8000512:	210a      	movs	r1, #10
 8000514:	54d1      	strb	r1, [r2, r3]
//		reception_complete = TRUE;
		if(strncmp((const char*)(data_buffer + 1), "SoC\r\n", count) == 0){
 8000516:	4842      	ldr	r0, [pc, #264]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 8000518:	4b3e      	ldr	r3, [pc, #248]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4941      	ldr	r1, [pc, #260]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000520:	f003 fef6 	bl	8004310 <strncmp>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d116      	bne.n	8000558 <HAL_UART_RxCpltCallback+0x7c>
			strcat((char *)transmitData, "SoC:67%\r\n");
 800052a:	483f      	ldr	r0, [pc, #252]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800052c:	f7ff fe4c 	bl	80001c8 <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000536:	4413      	add	r3, r2
 8000538:	493c      	ldr	r1, [pc, #240]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800053a:	461a      	mov	r2, r3
 800053c:	460b      	mov	r3, r1
 800053e:	cb03      	ldmia	r3!, {r0, r1}
 8000540:	6010      	str	r0, [r2, #0]
 8000542:	6051      	str	r1, [r2, #4]
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	8113      	strh	r3, [r2, #8]
			HAL_UART_Transmit(&huart2, transmitData, sizeof(transmitData), HAL_MAX_DELAY);
 8000548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800054c:	2264      	movs	r2, #100	; 0x64
 800054e:	4936      	ldr	r1, [pc, #216]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000550:	4837      	ldr	r0, [pc, #220]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 8000552:	f002 fb85 	bl	8002c60 <HAL_UART_Transmit>
 8000556:	e046      	b.n	80005e6 <HAL_UART_RxCpltCallback+0x10a>
		}
		else if(!strncmp((const char*)(data_buffer + 1), "SoH\r\n", count))
 8000558:	4831      	ldr	r0, [pc, #196]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 800055a:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	461a      	mov	r2, r3
 8000560:	4934      	ldr	r1, [pc, #208]	; (8000634 <HAL_UART_RxCpltCallback+0x158>)
 8000562:	f003 fed5 	bl	8004310 <strncmp>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d107      	bne.n	800057c <HAL_UART_RxCpltCallback+0xa0>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"SoH:98%\r\n", sizeof("SoH:98%\r\n"), HAL_MAX_DELAY);
 800056c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000570:	220a      	movs	r2, #10
 8000572:	4931      	ldr	r1, [pc, #196]	; (8000638 <HAL_UART_RxCpltCallback+0x15c>)
 8000574:	482e      	ldr	r0, [pc, #184]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 8000576:	f002 fb73 	bl	8002c60 <HAL_UART_Transmit>
 800057a:	e034      	b.n	80005e6 <HAL_UART_RxCpltCallback+0x10a>
		else if(!strncmp((const char*)(data_buffer + 1), "Voltage\r\n", count))
 800057c:	4828      	ldr	r0, [pc, #160]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 800057e:	4b25      	ldr	r3, [pc, #148]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	492d      	ldr	r1, [pc, #180]	; (800063c <HAL_UART_RxCpltCallback+0x160>)
 8000586:	f003 fec3 	bl	8004310 <strncmp>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d107      	bne.n	80005a0 <HAL_UART_RxCpltCallback+0xc4>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"Voltage: 3.200mV\r\n", sizeof("Voltage: 3.200mV\r\n"), HAL_MAX_DELAY);
 8000590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000594:	2213      	movs	r2, #19
 8000596:	492a      	ldr	r1, [pc, #168]	; (8000640 <HAL_UART_RxCpltCallback+0x164>)
 8000598:	4825      	ldr	r0, [pc, #148]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 800059a:	f002 fb61 	bl	8002c60 <HAL_UART_Transmit>
 800059e:	e022      	b.n	80005e6 <HAL_UART_RxCpltCallback+0x10a>
		else if(!strncmp((const char*)(data_buffer + 1), "Current\r\n", count))
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	4926      	ldr	r1, [pc, #152]	; (8000644 <HAL_UART_RxCpltCallback+0x168>)
 80005aa:	f003 feb1 	bl	8004310 <strncmp>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d107      	bne.n	80005c4 <HAL_UART_RxCpltCallback+0xe8>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"Current: 150mA\r\n", sizeof("Current: 150mA\r\n"), HAL_MAX_DELAY);
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b8:	2211      	movs	r2, #17
 80005ba:	4923      	ldr	r1, [pc, #140]	; (8000648 <HAL_UART_RxCpltCallback+0x16c>)
 80005bc:	481c      	ldr	r0, [pc, #112]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 80005be:	f002 fb4f 	bl	8002c60 <HAL_UART_Transmit>
 80005c2:	e010      	b.n	80005e6 <HAL_UART_RxCpltCallback+0x10a>
		else if(!strncmp((const char*)(data_buffer + 1), "Temp\r\n", count))
 80005c4:	4816      	ldr	r0, [pc, #88]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	491f      	ldr	r1, [pc, #124]	; (800064c <HAL_UART_RxCpltCallback+0x170>)
 80005ce:	f003 fe9f 	bl	8004310 <strncmp>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d106      	bne.n	80005e6 <HAL_UART_RxCpltCallback+0x10a>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"Temperature: 25C\r\n", sizeof("Temperature: 25C\r\n"), HAL_MAX_DELAY);
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	2213      	movs	r2, #19
 80005de:	491c      	ldr	r1, [pc, #112]	; (8000650 <HAL_UART_RxCpltCallback+0x174>)
 80005e0:	4813      	ldr	r0, [pc, #76]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 80005e2:	f002 fb3d 	bl	8002c60 <HAL_UART_Transmit>
		memset(data_buffer, 0, sizeof(data_buffer));
 80005e6:	2264      	movs	r2, #100	; 0x64
 80005e8:	2100      	movs	r1, #0
 80005ea:	480c      	ldr	r0, [pc, #48]	; (800061c <HAL_UART_RxCpltCallback+0x140>)
 80005ec:	f003 fe88 	bl	8004300 <memset>
		memset(transmitData, 0, sizeof(transmitData));
 80005f0:	2264      	movs	r2, #100	; 0x64
 80005f2:	2100      	movs	r1, #0
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005f6:	f003 fe83 	bl	8004300 <memset>
		count = 0;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_UART_RxCpltCallback+0x138>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &rcvd_data, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	4905      	ldr	r1, [pc, #20]	; (8000618 <HAL_UART_RxCpltCallback+0x13c>)
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 8000606:	f002 fbbf 	bl	8002d88 <HAL_UART_Receive_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000015c 	.word	0x2000015c
 8000618:	200000f4 	.word	0x200000f4
 800061c:	200000f8 	.word	0x200000f8
 8000620:	200000f9 	.word	0x200000f9
 8000624:	08004350 	.word	0x08004350
 8000628:	20000160 	.word	0x20000160
 800062c:	08004358 	.word	0x08004358
 8000630:	20000028 	.word	0x20000028
 8000634:	08004364 	.word	0x08004364
 8000638:	0800436c 	.word	0x0800436c
 800063c:	08004378 	.word	0x08004378
 8000640:	08004384 	.word	0x08004384
 8000644:	08004398 	.word	0x08004398
 8000648:	080043a4 	.word	0x080043a4
 800064c:	080043b8 	.word	0x080043b8
 8000650:	080043c0 	.word	0x080043c0

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fa5d 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f81f 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f8bd 	bl	80007e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000666:	f000 f89d 	bl	80007a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800066a:	f000 f86b 	bl	8000744 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  char *user_data = "Hello, from STM32. The application is running\r\n";
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <main+0x40>)
 8000670:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)user_data, strlen(user_data), HAL_MAX_DELAY);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff fda8 	bl	80001c8 <strlen>
 8000678:	4603      	mov	r3, r0
 800067a:	b29a      	uxth	r2, r3
 800067c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <main+0x44>)
 8000684:	f002 faec 	bl	8002c60 <HAL_UART_Transmit>

//  while(!reception_complete)
	HAL_UART_Receive_IT(&huart2, &rcvd_data, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	4904      	ldr	r1, [pc, #16]	; (800069c <main+0x48>)
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <main+0x44>)
 800068e:	f002 fb7b 	bl	8002d88 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x3e>
 8000694:	080043d4 	.word	0x080043d4
 8000698:	20000028 	.word	0x20000028
 800069c:	200000f4 	.word	0x200000f4

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b096      	sub	sp, #88	; 0x58
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2244      	movs	r2, #68	; 0x44
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fe26 	bl	8004300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c6:	f000 ff6b 	bl	80015a0 <HAL_PWREx_ControlVoltageScaling>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d0:	f000 f8ec 	bl	80008ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006de:	2310      	movs	r3, #16
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e6:	2302      	movs	r3, #2
 80006e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ee:	230a      	movs	r3, #10
 80006f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f2:	2307      	movs	r3, #7
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4618      	mov	r0, r3
 8000704:	f000 ffa2 	bl	800164c <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800070e:	f000 f8cd 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2303      	movs	r3, #3
 8000718:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000726:	463b      	mov	r3, r7
 8000728:	2104      	movs	r1, #4
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fb6a 	bl	8001e04 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000736:	f000 f8b9 	bl	80008ac <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3758      	adds	r7, #88	; 0x58
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART2_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART2_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000788:	f002 fa1c 	bl	8002bc4 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f88b 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000028 	.word	0x20000028
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_DMA_Init+0x38>)
 80007ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <MX_DMA_Init+0x38>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6493      	str	r3, [r2, #72]	; 0x48
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_DMA_Init+0x38>)
 80007b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2011      	movs	r0, #17
 80007c8:	f000 fafd 	bl	8000dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007cc:	2011      	movs	r0, #17
 80007ce:	f000 fb16 	bl	8000dfe <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a2a      	ldr	r2, [pc, #168]	; (80008a4 <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <MX_GPIO_Init+0xc4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_GPIO_Init+0xc4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <MX_GPIO_Init+0xc4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_GPIO_Init+0xc4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_GPIO_Init+0xc4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_GPIO_Init+0xc4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2120      	movs	r1, #32
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f000 fe79 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000868:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	480b      	ldr	r0, [pc, #44]	; (80008a8 <MX_GPIO_Init+0xc8>)
 800087a:	f000 fcc1 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087e:	2320      	movs	r3, #32
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f000 fcb2 	bl	8001200 <HAL_GPIO_Init>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000800 	.word	0x48000800

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x44>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x44>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6593      	str	r3, [r2, #88]	; 0x58
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x44>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b0ac      	sub	sp, #176	; 0xb0
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2288      	movs	r2, #136	; 0x88
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f003 fced 	bl	8004300 <memset>
  if(huart->Instance==USART2)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a3a      	ldr	r2, [pc, #232]	; (8000a14 <HAL_UART_MspInit+0x114>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d16c      	bne.n	8000a0a <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000930:	2302      	movs	r3, #2
 8000932:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fc85 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000948:	f7ff ffb0 	bl	80008ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094c:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <HAL_UART_MspInit+0x118>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000950:	4a31      	ldr	r2, [pc, #196]	; (8000a18 <HAL_UART_MspInit+0x118>)
 8000952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000956:	6593      	str	r3, [r2, #88]	; 0x58
 8000958:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <HAL_UART_MspInit+0x118>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <HAL_UART_MspInit+0x118>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <HAL_UART_MspInit+0x118>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000970:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <HAL_UART_MspInit+0x118>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097c:	230c      	movs	r3, #12
 800097e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000994:	2307      	movs	r3, #7
 8000996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f000 fc2c 	bl	8001200 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009aa:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <HAL_UART_MspInit+0x120>)
 80009ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009b6:	2210      	movs	r2, #16
 80009b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009e0:	f000 fa28 	bl	8000e34 <HAL_DMA_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80009ea:	f7ff ff5f 	bl	80008ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <HAL_UART_MspInit+0x11c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2026      	movs	r0, #38	; 0x26
 8000a00:	f000 f9e1 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a04:	2026      	movs	r0, #38	; 0x26
 8000a06:	f000 f9fa 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	37b0      	adds	r7, #176	; 0xb0
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	200000ac 	.word	0x200000ac
 8000a20:	40020080 	.word	0x40020080

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f8ae 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <DMA1_Channel7_IRQHandler+0x10>)
 8000a7e:	f000 fb10 	bl	80010a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000ac 	.word	0x200000ac

08000a8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <USART2_IRQHandler+0x10>)
 8000a92:	f002 f9cf 	bl	8002e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000028 	.word	0x20000028

08000aa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <SystemInit+0x20>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <SystemInit+0x20>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac8:	f7ff ffea 	bl	8000aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopForever+0xe>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopForever+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af2:	f003 fbe1 	bl	80042b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000af6:	f7ff fdad 	bl	8000654 <main>

08000afa <LoopForever>:

LoopForever:
    b LoopForever
 8000afa:	e7fe      	b.n	8000afa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000afc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b08:	0800445c 	.word	0x0800445c
  ldr r2, =_sbss
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b10:	200001c8 	.word	0x200001c8

08000b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_Init+0x3c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_Init+0x3c>)
 8000b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f000 f93e 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f80f 	bl	8000b58 <HAL_InitTick>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	e001      	b.n	8000b4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b46:	f7ff feb7 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d023      	beq.n	8000bb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_InitTick+0x70>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f949 	bl	8000e1a <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10f      	bne.n	8000bae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d809      	bhi.n	8000ba8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9c:	f000 f913 	bl	8000dc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_InitTick+0x74>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e001      	b.n	8000bb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	200001c4 	.word	0x200001c4

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200001c4 	.word	0x200001c4

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff29 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff3e 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff31 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa2 	bl	8000d6c <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e098      	b.n	8000f78 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <HAL_DMA_Init+0x150>)
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d80f      	bhi.n	8000e72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b4b      	ldr	r3, [pc, #300]	; (8000f88 <HAL_DMA_Init+0x154>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a4b      	ldr	r2, [pc, #300]	; (8000f8c <HAL_DMA_Init+0x158>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	009a      	lsls	r2, r3, #2
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <HAL_DMA_Init+0x15c>)
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e70:	e00e      	b.n	8000e90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b46      	ldr	r3, [pc, #280]	; (8000f94 <HAL_DMA_Init+0x160>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a43      	ldr	r2, [pc, #268]	; (8000f8c <HAL_DMA_Init+0x158>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	009a      	lsls	r2, r3, #2
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a42      	ldr	r2, [pc, #264]	; (8000f98 <HAL_DMA_Init+0x164>)
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2202      	movs	r2, #2
 8000e94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eea:	d039      	beq.n	8000f60 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a27      	ldr	r2, [pc, #156]	; (8000f90 <HAL_DMA_Init+0x15c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11a      	bne.n	8000f2c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <HAL_DMA_Init+0x168>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f003 031c 	and.w	r3, r3, #28
 8000f02:	210f      	movs	r1, #15
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4924      	ldr	r1, [pc, #144]	; (8000f9c <HAL_DMA_Init+0x168>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_DMA_Init+0x168>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6859      	ldr	r1, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1c:	f003 031c 	and.w	r3, r3, #28
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	491d      	ldr	r1, [pc, #116]	; (8000f9c <HAL_DMA_Init+0x168>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
 8000f2a:	e019      	b.n	8000f60 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <HAL_DMA_Init+0x16c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	f003 031c 	and.w	r3, r3, #28
 8000f38:	210f      	movs	r1, #15
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4917      	ldr	r1, [pc, #92]	; (8000fa0 <HAL_DMA_Init+0x16c>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_DMA_Init+0x16c>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6859      	ldr	r1, [r3, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f003 031c 	and.w	r3, r3, #28
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	4911      	ldr	r1, [pc, #68]	; (8000fa0 <HAL_DMA_Init+0x16c>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40020407 	.word	0x40020407
 8000f88:	bffdfff8 	.word	0xbffdfff8
 8000f8c:	cccccccd 	.word	0xcccccccd
 8000f90:	40020000 	.word	0x40020000
 8000f94:	bffdfbf8 	.word	0xbffdfbf8
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	400200a8 	.word	0x400200a8
 8000fa0:	400204a8 	.word	0x400204a8

08000fa4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d008      	beq.n	8000fce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e022      	b.n	8001014 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 020e 	bic.w	r2, r2, #14
 8000fdc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0201 	bic.w	r2, r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f003 021c 	and.w	r2, r3, #28
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8001000:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d005      	beq.n	8001044 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2204      	movs	r2, #4
 800103c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e029      	b.n	8001098 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 020e 	bic.w	r2, r2, #14
 8001052:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0201 	bic.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f003 021c 	and.w	r2, r3, #28
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	4798      	blx	r3
    }
  }
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f003 031c 	and.w	r3, r3, #28
 80010c2:	2204      	movs	r2, #4
 80010c4:	409a      	lsls	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d026      	beq.n	800111c <HAL_DMA_IRQHandler+0x7a>
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d021      	beq.n	800111c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0320 	and.w	r3, r3, #32
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d107      	bne.n	80010f6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0204 	bic.w	r2, r2, #4
 80010f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f003 021c 	and.w	r2, r3, #28
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	2104      	movs	r1, #4
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	2b00      	cmp	r3, #0
 8001110:	d071      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800111a:	e06c      	b.n	80011f6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	f003 031c 	and.w	r3, r3, #28
 8001124:	2202      	movs	r2, #2
 8001126:	409a      	lsls	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d02e      	beq.n	800118e <HAL_DMA_IRQHandler+0xec>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d029      	beq.n	800118e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10b      	bne.n	8001160 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 020a 	bic.w	r2, r2, #10
 8001156:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	f003 021c 	and.w	r2, r3, #28
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	2102      	movs	r1, #2
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001180:	2b00      	cmp	r3, #0
 8001182:	d038      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800118c:	e033      	b.n	80011f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f003 031c 	and.w	r3, r3, #28
 8001196:	2208      	movs	r2, #8
 8001198:	409a      	lsls	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d02a      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x156>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d025      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 020e 	bic.w	r2, r2, #14
 80011ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	f003 021c 	and.w	r2, r3, #28
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
}
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e17f      	b.n	8001510 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8171 	beq.w	800150a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d005      	beq.n	8001240 <HAL_GPIO_Init+0x40>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d130      	bne.n	80012a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001276:	2201      	movs	r2, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	f003 0201 	and.w	r2, r3, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d118      	bne.n	80012e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012b4:	2201      	movs	r2, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	f003 0201 	and.w	r2, r3, #1
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d017      	beq.n	800131c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d123      	bne.n	8001370 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3208      	adds	r2, #8
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0203 	and.w	r2, r3, #3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80ac 	beq.w	800150a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <HAL_GPIO_Init+0x330>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <HAL_GPIO_Init+0x330>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6613      	str	r3, [r2, #96]	; 0x60
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_GPIO_Init+0x330>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ca:	4a5a      	ldr	r2, [pc, #360]	; (8001534 <HAL_GPIO_Init+0x334>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013f4:	d025      	beq.n	8001442 <HAL_GPIO_Init+0x242>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	; (8001538 <HAL_GPIO_Init+0x338>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01f      	beq.n	800143e <HAL_GPIO_Init+0x23e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4e      	ldr	r2, [pc, #312]	; (800153c <HAL_GPIO_Init+0x33c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0x23a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4d      	ldr	r2, [pc, #308]	; (8001540 <HAL_GPIO_Init+0x340>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x236>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_GPIO_Init+0x344>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x232>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4b      	ldr	r2, [pc, #300]	; (8001548 <HAL_GPIO_Init+0x348>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x22e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4a      	ldr	r2, [pc, #296]	; (800154c <HAL_GPIO_Init+0x34c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x22a>
 8001426:	2306      	movs	r3, #6
 8001428:	e00c      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800142a:	2307      	movs	r3, #7
 800142c:	e00a      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800142e:	2305      	movs	r3, #5
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x244>
 8001432:	2304      	movs	r3, #4
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x244>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x244>
 8001442:	2300      	movs	r3, #0
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001454:	4937      	ldr	r1, [pc, #220]	; (8001534 <HAL_GPIO_Init+0x334>)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_GPIO_Init+0x350>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001486:	4a32      	ldr	r2, [pc, #200]	; (8001550 <HAL_GPIO_Init+0x350>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_GPIO_Init+0x350>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_GPIO_Init+0x350>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_GPIO_Init+0x350>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014da:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_GPIO_Init+0x350>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_GPIO_Init+0x350>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001504:	4a12      	ldr	r2, [pc, #72]	; (8001550 <HAL_GPIO_Init+0x350>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	f47f ae78 	bne.w	8001210 <HAL_GPIO_Init+0x10>
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	48000c00 	.word	0x48000c00
 8001544:	48001000 	.word	0x48001000
 8001548:	48001400 	.word	0x48001400
 800154c:	48001800 	.word	0x48001800
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001570:	e002      	b.n	8001578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_PWREx_GetVoltageRange+0x18>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40007000 	.word	0x40007000

080015a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ae:	d130      	bne.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015bc:	d038      	beq.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2232      	movs	r2, #50	; 0x32
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0c9b      	lsrs	r3, r3, #18
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e4:	e002      	b.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f8:	d102      	bne.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f2      	bne.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160c:	d110      	bne.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e00f      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161e:	d007      	beq.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001628:	4a05      	ldr	r2, [pc, #20]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40007000 	.word	0x40007000
 8001644:	20000000 	.word	0x20000000
 8001648:	431bde83 	.word	0x431bde83

0800164c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e3ca      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4b97      	ldr	r3, [pc, #604]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001668:	4b94      	ldr	r3, [pc, #592]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80e4 	beq.w	8001848 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_RCC_OscConfig+0x4a>
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	f040 808b 	bne.w	80017a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b01      	cmp	r3, #1
 8001692:	f040 8087 	bne.w	80017a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001696:	4b89      	ldr	r3, [pc, #548]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x62>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e3a2      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1a      	ldr	r2, [r3, #32]
 80016b2:	4b82      	ldr	r3, [pc, #520]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_RCC_OscConfig+0x7c>
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c6:	e005      	b.n	80016d4 <HAL_RCC_OscConfig+0x88>
 80016c8:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d223      	bcs.n	8001720 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fd55 	bl	800218c <RCC_SetFlashLatencyFromMSIRange>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e383      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ec:	4b73      	ldr	r3, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a72      	ldr	r2, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	496d      	ldr	r1, [pc, #436]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170a:	4b6c      	ldr	r3, [pc, #432]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	4968      	ldr	r1, [pc, #416]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
 800171e:	e025      	b.n	800176c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001720:	4b66      	ldr	r3, [pc, #408]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a65      	ldr	r2, [pc, #404]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b63      	ldr	r3, [pc, #396]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4960      	ldr	r1, [pc, #384]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	495b      	ldr	r1, [pc, #364]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fd15 	bl	800218c <RCC_SetFlashLatencyFromMSIRange>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e343      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800176c:	f000 fc4a 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b52      	ldr	r3, [pc, #328]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	4950      	ldr	r1, [pc, #320]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	4a4e      	ldr	r2, [pc, #312]	; (80018c4 <HAL_RCC_OscConfig+0x278>)
 800178a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800178c:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff f9e1 	bl	8000b58 <HAL_InitTick>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d052      	beq.n	8001846 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	e327      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d032      	beq.n	8001812 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a42      	ldr	r2, [pc, #264]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fa1e 	bl	8000bf8 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c0:	f7ff fa1a 	bl	8000bf8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e310      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d2:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017de:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a36      	ldr	r2, [pc, #216]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4931      	ldr	r1, [pc, #196]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	492c      	ldr	r1, [pc, #176]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e01a      	b.n	8001848 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800181e:	f7ff f9eb 	bl	8000bf8 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001826:	f7ff f9e7 	bl	8000bf8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e2dd      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x1da>
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001846:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d074      	beq.n	800193e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b08      	cmp	r3, #8
 8001858:	d005      	beq.n	8001866 <HAL_RCC_OscConfig+0x21a>
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d10e      	bne.n	800187e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d10b      	bne.n	800187e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d064      	beq.n	800193c <HAL_RCC_OscConfig+0x2f0>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d160      	bne.n	800193c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e2ba      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x24a>
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e026      	b.n	80018e4 <HAL_RCC_OscConfig+0x298>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189e:	d115      	bne.n	80018cc <HAL_RCC_OscConfig+0x280>
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a05      	ldr	r2, [pc, #20]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80018a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a02      	ldr	r2, [pc, #8]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x298>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08004404 	.word	0x08004404
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004
 80018cc:	4ba0      	ldr	r3, [pc, #640]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a9f      	ldr	r2, [pc, #636]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b9d      	ldr	r3, [pc, #628]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a9c      	ldr	r2, [pc, #624]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f984 	bl	8000bf8 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff f980 	bl	8000bf8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e276      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2a8>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff f970 	bl	8000bf8 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff f96c 	bl	8000bf8 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e262      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x2d0>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d060      	beq.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x310>
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d119      	bne.n	800198a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d116      	bne.n	800198a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800195c:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_OscConfig+0x328>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e23f      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	4973      	ldr	r1, [pc, #460]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001988:	e040      	b.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d023      	beq.n	80019da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001992:	4b6f      	ldr	r3, [pc, #444]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6e      	ldr	r2, [pc, #440]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff f92b 	bl	8000bf8 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff f927 	bl	8000bf8 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e21d      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	495f      	ldr	r1, [pc, #380]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e018      	b.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a5c      	ldr	r2, [pc, #368]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f907 	bl	8000bf8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff f903 	bl	8000bf8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1f9      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d03c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a20:	4b4b      	ldr	r3, [pc, #300]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff f8e2 	bl	8000bf8 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff f8de 	bl	8000bf8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1d4      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ef      	beq.n	8001a38 <HAL_RCC_OscConfig+0x3ec>
 8001a58:	e01b      	b.n	8001a92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a60:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f8c5 	bl	8000bf8 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff f8c1 	bl	8000bf8 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1b7      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ef      	bne.n	8001a72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80a6 	beq.w	8001bec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10d      	bne.n	8001acc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aba:	6593      	str	r3, [r2, #88]	; 0x58
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_RCC_OscConfig+0x508>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d118      	bne.n	8001b0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_OscConfig+0x508>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_RCC_OscConfig+0x508>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f888 	bl	8000bf8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aec:	f7ff f884 	bl	8000bf8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e17a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_RCC_OscConfig+0x508>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d108      	bne.n	8001b24 <HAL_RCC_OscConfig+0x4d8>
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b22:	e029      	b.n	8001b78 <HAL_RCC_OscConfig+0x52c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d115      	bne.n	8001b58 <HAL_RCC_OscConfig+0x50c>
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b4c:	e014      	b.n	8001b78 <HAL_RCC_OscConfig+0x52c>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40007000 	.word	0x40007000
 8001b58:	4b9c      	ldr	r3, [pc, #624]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	4a9b      	ldr	r2, [pc, #620]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b68:	4b98      	ldr	r3, [pc, #608]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a97      	ldr	r2, [pc, #604]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d016      	beq.n	8001bae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f83a 	bl	8000bf8 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff f836 	bl	8000bf8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e12a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ed      	beq.n	8001b88 <HAL_RCC_OscConfig+0x53c>
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff f823 	bl	8000bf8 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff f81f 	bl	8000bf8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e113      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bcc:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1ed      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	4b7a      	ldr	r3, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	4a79      	ldr	r2, [pc, #484]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80fe 	beq.w	8001df2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	f040 80d0 	bne.w	8001da0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c00:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d130      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d127      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d11f      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c40:	2a07      	cmp	r2, #7
 8001c42:	bf14      	ite	ne
 8001c44:	2201      	movne	r2, #1
 8001c46:	2200      	moveq	r2, #0
 8001c48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d113      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d109      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d06e      	beq.n	8001d54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d069      	beq.n	8001d50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c88:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0ad      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c98:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a4b      	ldr	r2, [pc, #300]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ca4:	f7fe ffa8 	bl	8000bf8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe ffa4 	bl	8000bf8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e09a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cca:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <HAL_RCC_OscConfig+0x784>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cda:	3a01      	subs	r2, #1
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ce4:	0212      	lsls	r2, r2, #8
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cec:	0852      	lsrs	r2, r2, #1
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	0552      	lsls	r2, r2, #21
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cf8:	0852      	lsrs	r2, r2, #1
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	0652      	lsls	r2, r2, #25
 8001cfe:	4311      	orrs	r1, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d04:	0912      	lsrs	r2, r2, #4
 8001d06:	0452      	lsls	r2, r2, #17
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	4930      	ldr	r1, [pc, #192]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a2a      	ldr	r2, [pc, #168]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d28:	f7fe ff66 	bl	8000bf8 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe ff62 	bl	8000bf8 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e058      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d4e:	e050      	b.n	8001df2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e04f      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d148      	bne.n	8001df2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d78:	f7fe ff3e 	bl	8000bf8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7fe ff3a 	bl	8000bf8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e030      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x734>
 8001d9e:	e028      	b.n	8001df2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d023      	beq.n	8001dee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7fe ff21 	bl	8000bf8 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7fe ff1d 	bl	8000bf8 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d905      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e013      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_OscConfig+0x7b0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ec      	bne.n	8001dba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_OscConfig+0x7b0>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	4905      	ldr	r1, [pc, #20]	; (8001dfc <HAL_RCC_OscConfig+0x7b0>)
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x7b4>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
 8001dec:	e001      	b.n	8001df2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	feeefffc 	.word	0xfeeefffc

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0e7      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b75      	ldr	r3, [pc, #468]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d910      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b72      	ldr	r3, [pc, #456]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4970      	ldr	r1, [pc, #448]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b6e      	ldr	r3, [pc, #440]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0cf      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d010      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4b66      	ldr	r3, [pc, #408]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d908      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b63      	ldr	r3, [pc, #396]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4960      	ldr	r1, [pc, #384]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d04c      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d121      	bne.n	8001eda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0a6      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea2:	4b54      	ldr	r3, [pc, #336]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d115      	bne.n	8001eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e09a      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eba:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e08e      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e086      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f023 0203 	bic.w	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4943      	ldr	r1, [pc, #268]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eec:	f7fe fe84 	bl	8000bf8 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f7fe fe80 	bl	8000bf8 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e06e      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 020c 	and.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1eb      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d010      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d208      	bcs.n	8001f4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	492b      	ldr	r1, [pc, #172]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d210      	bcs.n	8001f7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 0207 	bic.w	r2, r3, #7
 8001f60:	4923      	ldr	r1, [pc, #140]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e036      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	4918      	ldr	r1, [pc, #96]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4910      	ldr	r1, [pc, #64]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fb8:	f000 f824 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	490b      	ldr	r1, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001fd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x1fc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fdbb 	bl	8000b58 <HAL_InitTick>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08004404 	.word	0x08004404
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002012:	4b3e      	ldr	r3, [pc, #248]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800201c:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x34>
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d121      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d11e      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002038:	4b34      	ldr	r3, [pc, #208]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e005      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002060:	4a2b      	ldr	r2, [pc, #172]	; (8002110 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10d      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002074:	e00a      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b04      	cmp	r3, #4
 800207a:	d102      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCC_GetSysClockFreq+0x110>)
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	e004      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d101      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_GetSysClockFreq+0x114>)
 800208a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d134      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0xa6>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d003      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0xac>
 80020a8:	e005      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ac:	617b      	str	r3, [r7, #20]
      break;
 80020ae:	e005      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_GetSysClockFreq+0x114>)
 80020b2:	617b      	str	r3, [r7, #20]
      break;
 80020b4:	e002      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	617b      	str	r3, [r7, #20]
      break;
 80020ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	3301      	adds	r3, #1
 80020c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	fb03 f202 	mul.w	r2, r3, r2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	0e5b      	lsrs	r3, r3, #25
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	3301      	adds	r3, #1
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020fc:	69bb      	ldr	r3, [r7, #24]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	; 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	0800441c 	.word	0x0800441c
 8002114:	00f42400 	.word	0x00f42400
 8002118:	007a1200 	.word	0x007a1200

0800211c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_RCC_GetHCLKFreq+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002138:	f7ff fff0 	bl	800211c <HAL_RCC_GetHCLKFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4904      	ldr	r1, [pc, #16]	; (800215c <HAL_RCC_GetPCLK1Freq+0x28>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	08004414 	.word	0x08004414

08002160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002164:	f7ff ffda 	bl	800211c <HAL_RCC_GetHCLKFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	0adb      	lsrs	r3, r3, #11
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	4904      	ldr	r1, [pc, #16]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	08004414 	.word	0x08004414

0800218c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021a4:	f7ff f9ee 	bl	8001584 <HAL_PWREx_GetVoltageRange>
 80021a8:	6178      	str	r0, [r7, #20]
 80021aa:	e014      	b.n	80021d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	4a24      	ldr	r2, [pc, #144]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	; 0x58
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021c4:	f7ff f9de 	bl	8001584 <HAL_PWREx_GetVoltageRange>
 80021c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021dc:	d10b      	bne.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d919      	bls.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2ba0      	cmp	r3, #160	; 0xa0
 80021e8:	d902      	bls.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ea:	2302      	movs	r3, #2
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	e013      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f0:	2301      	movs	r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	e010      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d902      	bls.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021fc:	2303      	movs	r3, #3
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e00a      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b80      	cmp	r3, #128	; 0x80
 8002206:	d102      	bne.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002208:	2302      	movs	r3, #2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	e004      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b70      	cmp	r3, #112	; 0x70
 8002212:	d101      	bne.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002214:	2301      	movs	r3, #1
 8002216:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 0207 	bic.w	r2, r3, #7
 8002220:	4909      	ldr	r1, [pc, #36]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	40022000 	.word	0x40022000

0800224c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002254:	2300      	movs	r3, #0
 8002256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002258:	2300      	movs	r3, #0
 800225a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d041      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800226c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002270:	d02a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002272:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002276:	d824      	bhi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800227c:	d008      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800227e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002282:	d81e      	bhi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228c:	d010      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800228e:	e018      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002290:	4b86      	ldr	r3, [pc, #536]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a85      	ldr	r2, [pc, #532]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800229c:	e015      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fabb 	bl	8002820 <RCCEx_PLLSAI1_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ae:	e00c      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3320      	adds	r3, #32
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fba6 	bl	8002a08 <RCCEx_PLLSAI2_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c0:	e003      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	74fb      	strb	r3, [r7, #19]
      break;
 80022c6:	e000      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d0:	4b76      	ldr	r3, [pc, #472]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022de:	4973      	ldr	r1, [pc, #460]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022e6:	e001      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d041      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002300:	d02a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002306:	d824      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800230c:	d008      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800230e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002312:	d81e      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231c:	d010      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800231e:	e018      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002320:	4b62      	ldr	r3, [pc, #392]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a61      	ldr	r2, [pc, #388]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800232c:	e015      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fa73 	bl	8002820 <RCCEx_PLLSAI1_Config>
 800233a:	4603      	mov	r3, r0
 800233c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800233e:	e00c      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3320      	adds	r3, #32
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fb5e 	bl	8002a08 <RCCEx_PLLSAI2_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002350:	e003      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	74fb      	strb	r3, [r7, #19]
      break;
 8002356:	e000      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002360:	4b52      	ldr	r3, [pc, #328]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236e:	494f      	ldr	r1, [pc, #316]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002376:	e001      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a0 	beq.w	80024ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800239e:	2300      	movs	r3, #0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	4a40      	ldr	r2, [pc, #256]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6593      	str	r3, [r2, #88]	; 0x58
 80023b0:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c0:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023cc:	f7fe fc14 	bl	8000bf8 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d2:	e009      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d4:	f7fe fc10 	bl	8000bf8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d902      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	74fb      	strb	r3, [r7, #19]
        break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e8:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ef      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d15c      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023fa:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002404:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01f      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	d019      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002444:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d016      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe fbcf 	bl	8000bf8 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245c:	e00b      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fbcb 	bl	8000bf8 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d902      	bls.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	74fb      	strb	r3, [r7, #19]
            break;
 8002474:	e006      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ec      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249a:	4904      	ldr	r1, [pc, #16]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024a2:	e009      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
 80024a8:	e006      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b8:	7c7b      	ldrb	r3, [r7, #17]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b9e      	ldr	r3, [pc, #632]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	4a9d      	ldr	r2, [pc, #628]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d6:	4b98      	ldr	r3, [pc, #608]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f023 0203 	bic.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	4994      	ldr	r1, [pc, #592]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f8:	4b8f      	ldr	r3, [pc, #572]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f023 020c 	bic.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	498c      	ldr	r1, [pc, #560]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800251a:	4b87      	ldr	r3, [pc, #540]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	4983      	ldr	r1, [pc, #524]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	497b      	ldr	r1, [pc, #492]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	4972      	ldr	r1, [pc, #456]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002580:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	496a      	ldr	r1, [pc, #424]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	4961      	ldr	r1, [pc, #388]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025c4:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4959      	ldr	r1, [pc, #356]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e6:	4b54      	ldr	r3, [pc, #336]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	4950      	ldr	r1, [pc, #320]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	4948      	ldr	r1, [pc, #288]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800262a:	4b43      	ldr	r3, [pc, #268]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	493f      	ldr	r1, [pc, #252]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d028      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265a:	4937      	ldr	r1, [pc, #220]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266a:	d106      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002676:	60d3      	str	r3, [r2, #12]
 8002678:	e011      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002682:	d10c      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f8c8 	bl	8002820 <RCCEx_PLLSAI1_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d028      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	491f      	ldr	r1, [pc, #124]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c8:	d106      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d4:	60d3      	str	r3, [r2, #12]
 80026d6:	e011      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2101      	movs	r1, #1
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f899 	bl	8002820 <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d02b      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	4908      	ldr	r1, [pc, #32]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002726:	d109      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a02      	ldr	r2, [pc, #8]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002732:	60d3      	str	r3, [r2, #12]
 8002734:	e014      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002744:	d10c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f867 	bl	8002820 <RCCEx_PLLSAI1_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02f      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277a:	4928      	ldr	r1, [pc, #160]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800278a:	d10d      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	2102      	movs	r1, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f844 	bl	8002820 <RCCEx_PLLSAI1_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	74bb      	strb	r3, [r7, #18]
 80027a6:	e011      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3320      	adds	r3, #32
 80027b6:	2102      	movs	r1, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f925 	bl	8002a08 <RCCEx_PLLSAI2_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280a:	4904      	ldr	r1, [pc, #16]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002812:	7cbb      	ldrb	r3, [r7, #18]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000

08002820 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800282e:	4b75      	ldr	r3, [pc, #468]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800283a:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0203 	and.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d10d      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
       ||
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002852:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
       ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d047      	beq.n	80028f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	e044      	b.n	80028f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d018      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0x86>
 8002874:	2b03      	cmp	r3, #3
 8002876:	d825      	bhi.n	80028c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002878:	2b01      	cmp	r3, #1
 800287a:	d002      	beq.n	8002882 <RCCEx_PLLSAI1_Config+0x62>
 800287c:	2b02      	cmp	r3, #2
 800287e:	d009      	beq.n	8002894 <RCCEx_PLLSAI1_Config+0x74>
 8002880:	e020      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002882:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11d      	bne.n	80028ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002892:	e01a      	b.n	80028ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002894:	4b5b      	ldr	r3, [pc, #364]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a4:	e013      	b.n	80028ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028a6:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028b2:	4b54      	ldr	r3, [pc, #336]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028c2:	e006      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      break;
 80028c8:	e004      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ca:	bf00      	nop
 80028cc:	e002      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028da:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	430b      	orrs	r3, r1
 80028f0:	4944      	ldr	r1, [pc, #272]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d17d      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028fc:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a40      	ldr	r2, [pc, #256]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe f976 	bl	8000bf8 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800290e:	e009      	b.n	8002924 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002910:	f7fe f972 	bl	8000bf8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d902      	bls.n	8002924 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
        break;
 8002922:	e005      	b.n	8002930 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002924:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1ef      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d160      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d111      	bne.n	8002960 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293c:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	0211      	lsls	r1, r2, #8
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	0912      	lsrs	r2, r2, #4
 8002954:	0452      	lsls	r2, r2, #17
 8002956:	430a      	orrs	r2, r1
 8002958:	492a      	ldr	r1, [pc, #168]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	610b      	str	r3, [r1, #16]
 800295e:	e027      	b.n	80029b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d112      	bne.n	800298c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800296e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	0211      	lsls	r1, r2, #8
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6912      	ldr	r2, [r2, #16]
 800297c:	0852      	lsrs	r2, r2, #1
 800297e:	3a01      	subs	r2, #1
 8002980:	0552      	lsls	r2, r2, #21
 8002982:	430a      	orrs	r2, r1
 8002984:	491f      	ldr	r1, [pc, #124]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	610b      	str	r3, [r1, #16]
 800298a:	e011      	b.n	80029b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002994:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6892      	ldr	r2, [r2, #8]
 800299c:	0211      	lsls	r1, r2, #8
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6952      	ldr	r2, [r2, #20]
 80029a2:	0852      	lsrs	r2, r2, #1
 80029a4:	3a01      	subs	r2, #1
 80029a6:	0652      	lsls	r2, r2, #25
 80029a8:	430a      	orrs	r2, r1
 80029aa:	4916      	ldr	r1, [pc, #88]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe f91c 	bl	8000bf8 <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029c2:	e009      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029c4:	f7fe f918 	bl	8000bf8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d902      	bls.n	80029d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	73fb      	strb	r3, [r7, #15]
          break;
 80029d6:	e005      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ef      	beq.n	80029c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	4904      	ldr	r1, [pc, #16]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000

08002a08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a16:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d018      	beq.n	8002a54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a22:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0203 	and.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d10d      	bne.n	8002a4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
       ||
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a3a:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
       ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d047      	beq.n	8002ade <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e044      	b.n	8002ade <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d018      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0x86>
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d825      	bhi.n	8002aac <RCCEx_PLLSAI2_Config+0xa4>
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d002      	beq.n	8002a6a <RCCEx_PLLSAI2_Config+0x62>
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d009      	beq.n	8002a7c <RCCEx_PLLSAI2_Config+0x74>
 8002a68:	e020      	b.n	8002aac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a6a:	4b55      	ldr	r3, [pc, #340]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11d      	bne.n	8002ab2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7a:	e01a      	b.n	8002ab2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d116      	bne.n	8002ab6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8c:	e013      	b.n	8002ab6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a8e:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a9a:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aaa:	e006      	b.n	8002aba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab0:	e004      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e002      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	4939      	ldr	r1, [pc, #228]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d167      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ae4:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af0:	f7fe f882 	bl	8000bf8 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002af6:	e009      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af8:	f7fe f87e 	bl	8000bf8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	73fb      	strb	r3, [r7, #15]
        break;
 8002b0a:	e005      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ef      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d14a      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d111      	bne.n	8002b48 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b24:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6892      	ldr	r2, [r2, #8]
 8002b34:	0211      	lsls	r1, r2, #8
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68d2      	ldr	r2, [r2, #12]
 8002b3a:	0912      	lsrs	r2, r2, #4
 8002b3c:	0452      	lsls	r2, r2, #17
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	491f      	ldr	r1, [pc, #124]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	614b      	str	r3, [r1, #20]
 8002b46:	e011      	b.n	8002b6c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6892      	ldr	r2, [r2, #8]
 8002b58:	0211      	lsls	r1, r2, #8
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6912      	ldr	r2, [r2, #16]
 8002b5e:	0852      	lsrs	r2, r2, #1
 8002b60:	3a01      	subs	r2, #1
 8002b62:	0652      	lsls	r2, r2, #25
 8002b64:	430a      	orrs	r2, r1
 8002b66:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe f83e 	bl	8000bf8 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b7e:	e009      	b.n	8002b94 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b80:	f7fe f83a 	bl	8000bf8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d902      	bls.n	8002b94 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	73fb      	strb	r3, [r7, #15]
          break;
 8002b92:	e005      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	4904      	ldr	r1, [pc, #16]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e040      	b.n	8002c58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd fe8a 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fc18 	bl	8003438 <UART_SetConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e022      	b.n	8002c58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fec4 	bl	80039a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 ff4b 	bl	8003aec <UART_CheckIdleState>
 8002c56:	4603      	mov	r3, r0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	f040 8082 	bne.w	8002d7e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_Transmit+0x26>
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e07a      	b.n	8002d80 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_UART_Transmit+0x38>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e073      	b.n	8002d80 <HAL_UART_Transmit+0x120>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2221      	movs	r2, #33	; 0x21
 8002cac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cae:	f7fd ffa3 	bl	8000bf8 <HAL_GetTick>
 8002cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ccc:	d108      	bne.n	8002ce0 <HAL_UART_Transmit+0x80>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	e003      	b.n	8002ce8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002cf0:	e02d      	b.n	8002d4e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 ff3e 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e039      	b.n	8002d80 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	881a      	ldrh	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d1e:	b292      	uxth	r2, r2
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	3302      	adds	r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	e008      	b.n	8002d3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	781a      	ldrb	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	b292      	uxth	r2, r2
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1cb      	bne.n	8002cf2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	; 0x40
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 ff0a 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e005      	b.n	8002d80 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d142      	bne.n	8002e24 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_UART_Receive_IT+0x22>
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e03b      	b.n	8002e26 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Receive_IT+0x34>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e034      	b.n	8002e26 <HAL_UART_Receive_IT+0x9e>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <HAL_UART_Receive_IT+0xa8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d01f      	beq.n	8002e14 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d018      	beq.n	8002e14 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	613b      	str	r3, [r7, #16]
   return(result);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	69f9      	ldr	r1, [r7, #28]
 8002e06:	6a3a      	ldr	r2, [r7, #32]
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e6      	bne.n	8002de2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 ff74 	bl	8003d08 <UART_Start_Receive_IT>
 8002e20:	4603      	mov	r3, r0
 8002e22:	e000      	b.n	8002e26 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3728      	adds	r7, #40	; 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40008000 	.word	0x40008000

08002e34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b0ba      	sub	sp, #232	; 0xe8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e62:	4013      	ands	r3, r2
 8002e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d115      	bne.n	8002e9c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00f      	beq.n	8002e9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 82a6 	beq.w	80033de <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
      }
      return;
 8002e9a:	e2a0      	b.n	80033de <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8117 	beq.w	80030d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002eb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002eb6:	4b85      	ldr	r3, [pc, #532]	; (80030cc <HAL_UART_IRQHandler+0x298>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 810a 	beq.w	80030d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d011      	beq.n	8002ef0 <HAL_UART_IRQHandler+0xbc>
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d011      	beq.n	8002f20 <HAL_UART_IRQHandler+0xec>
 8002efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f16:	f043 0204 	orr.w	r2, r3, #4
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d011      	beq.n	8002f50 <HAL_UART_IRQHandler+0x11c>
 8002f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f46:	f043 0202 	orr.w	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d017      	beq.n	8002f8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f82:	f043 0208 	orr.w	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d012      	beq.n	8002fbe <HAL_UART_IRQHandler+0x18a>
 8002f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00c      	beq.n	8002fbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 820c 	beq.w	80033e2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d005      	beq.n	8003016 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800300a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800300e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003012:	2b00      	cmp	r3, #0
 8003014:	d04f      	beq.n	80030b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 ff40 	bl	8003e9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d141      	bne.n	80030ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3308      	adds	r3, #8
 8003030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3308      	adds	r3, #8
 8003052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800305a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800306e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1d9      	bne.n	800302a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	2b00      	cmp	r3, #0
 800307c:	d013      	beq.n	80030a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <HAL_UART_IRQHandler+0x29c>)
 8003084:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd ffc8 	bl	8001020 <HAL_DMA_Abort_IT>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d017      	beq.n	80030c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80030a0:	4610      	mov	r0, r2
 80030a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	e00f      	b.n	80030c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f9b0 	bl	800340c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	e00b      	b.n	80030c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9ac 	bl	800340c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b4:	e007      	b.n	80030c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9a8 	bl	800340c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80030c4:	e18d      	b.n	80033e2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c6:	bf00      	nop
    return;
 80030c8:	e18b      	b.n	80033e2 <HAL_UART_IRQHandler+0x5ae>
 80030ca:	bf00      	nop
 80030cc:	04000120 	.word	0x04000120
 80030d0:	08003f63 	.word	0x08003f63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 8146 	bne.w	800336a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 813f 	beq.w	800336a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8138 	beq.w	800336a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2210      	movs	r2, #16
 8003100:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	f040 80b4 	bne.w	800327a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800311e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 815f 	beq.w	80033e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800312e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003132:	429a      	cmp	r2, r3
 8003134:	f080 8157 	bcs.w	80033e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800313e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 8085 	bne.w	800325e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003182:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800318a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1da      	bne.n	8003154 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3308      	adds	r3, #8
 80031a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3308      	adds	r3, #8
 80031be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e1      	bne.n	800319e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3308      	adds	r3, #8
 80031fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003200:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800320c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e3      	bne.n	80031da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800322c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322e:	f023 0310 	bic.w	r3, r3, #16
 8003232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003240:	65bb      	str	r3, [r7, #88]	; 0x58
 8003242:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800324e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e4      	bne.n	800321e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fea3 	bl	8000fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800326a:	b29b      	uxth	r3, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	b29b      	uxth	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8d4 	bl	8003420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003278:	e0b5      	b.n	80033e6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003286:	b29b      	uxth	r3, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80a7 	beq.w	80033ea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800329c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a2 	beq.w	80033ea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032c8:	647b      	str	r3, [r7, #68]	; 0x44
 80032ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032d0:	e841 2300 	strex	r3, r2, [r1]
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e4      	bne.n	80032a6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	e853 3f00 	ldrex	r3, [r3]
 80032ea:	623b      	str	r3, [r7, #32]
   return(result);
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3308      	adds	r3, #8
 80032fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003300:	633a      	str	r2, [r7, #48]	; 0x30
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e3      	bne.n	80032dc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	60fb      	str	r3, [r7, #12]
   return(result);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0310 	bic.w	r3, r3, #16
 800333a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	69b9      	ldr	r1, [r7, #24]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	617b      	str	r3, [r7, #20]
   return(result);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e4      	bne.n	8003326 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800335c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f85c 	bl	8003420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003368:	e03f      	b.n	80033ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00e      	beq.n	8003394 <HAL_UART_IRQHandler+0x560>
 8003376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800338a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 ff88 	bl	80042a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003392:	e02d      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00e      	beq.n	80033be <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
    }
    return;
 80033bc:	e017      	b.n	80033ee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
 80033ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00c      	beq.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fdd9 	bl	8003f8e <UART_EndTransmit_IT>
    return;
 80033dc:	e008      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80033de:	bf00      	nop
 80033e0:	e006      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80033e2:	bf00      	nop
 80033e4:	e004      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80033ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80033f0:	37e8      	adds	r7, #232	; 0xe8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop

080033f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800343c:	b08a      	sub	sp, #40	; 0x28
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	431a      	orrs	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	4313      	orrs	r3, r2
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4ba4      	ldr	r3, [pc, #656]	; (80036f8 <UART_SetConfig+0x2c0>)
 8003468:	4013      	ands	r3, r2
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003470:	430b      	orrs	r3, r1
 8003472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a99      	ldr	r2, [pc, #612]	; (80036fc <UART_SetConfig+0x2c4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	4313      	orrs	r3, r2
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	430a      	orrs	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a90      	ldr	r2, [pc, #576]	; (8003700 <UART_SetConfig+0x2c8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d126      	bne.n	8003510 <UART_SetConfig+0xd8>
 80034c2:	4b90      	ldr	r3, [pc, #576]	; (8003704 <UART_SetConfig+0x2cc>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d81b      	bhi.n	8003508 <UART_SetConfig+0xd0>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0xa0>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034f9 	.word	0x080034f9
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003501 	.word	0x08003501
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ee:	e116      	b.n	800371e <UART_SetConfig+0x2e6>
 80034f0:	2302      	movs	r3, #2
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f6:	e112      	b.n	800371e <UART_SetConfig+0x2e6>
 80034f8:	2304      	movs	r3, #4
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fe:	e10e      	b.n	800371e <UART_SetConfig+0x2e6>
 8003500:	2308      	movs	r3, #8
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e10a      	b.n	800371e <UART_SetConfig+0x2e6>
 8003508:	2310      	movs	r3, #16
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350e:	e106      	b.n	800371e <UART_SetConfig+0x2e6>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a7c      	ldr	r2, [pc, #496]	; (8003708 <UART_SetConfig+0x2d0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d138      	bne.n	800358c <UART_SetConfig+0x154>
 800351a:	4b7a      	ldr	r3, [pc, #488]	; (8003704 <UART_SetConfig+0x2cc>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d82d      	bhi.n	8003584 <UART_SetConfig+0x14c>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <UART_SetConfig+0xf8>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003565 	.word	0x08003565
 8003534:	08003585 	.word	0x08003585
 8003538:	08003585 	.word	0x08003585
 800353c:	08003585 	.word	0x08003585
 8003540:	08003575 	.word	0x08003575
 8003544:	08003585 	.word	0x08003585
 8003548:	08003585 	.word	0x08003585
 800354c:	08003585 	.word	0x08003585
 8003550:	0800356d 	.word	0x0800356d
 8003554:	08003585 	.word	0x08003585
 8003558:	08003585 	.word	0x08003585
 800355c:	08003585 	.word	0x08003585
 8003560:	0800357d 	.word	0x0800357d
 8003564:	2300      	movs	r3, #0
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356a:	e0d8      	b.n	800371e <UART_SetConfig+0x2e6>
 800356c:	2302      	movs	r3, #2
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003572:	e0d4      	b.n	800371e <UART_SetConfig+0x2e6>
 8003574:	2304      	movs	r3, #4
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e0d0      	b.n	800371e <UART_SetConfig+0x2e6>
 800357c:	2308      	movs	r3, #8
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e0cc      	b.n	800371e <UART_SetConfig+0x2e6>
 8003584:	2310      	movs	r3, #16
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e0c8      	b.n	800371e <UART_SetConfig+0x2e6>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5e      	ldr	r2, [pc, #376]	; (800370c <UART_SetConfig+0x2d4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d125      	bne.n	80035e2 <UART_SetConfig+0x1aa>
 8003596:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <UART_SetConfig+0x2cc>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035a0:	2b30      	cmp	r3, #48	; 0x30
 80035a2:	d016      	beq.n	80035d2 <UART_SetConfig+0x19a>
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d818      	bhi.n	80035da <UART_SetConfig+0x1a2>
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d00a      	beq.n	80035c2 <UART_SetConfig+0x18a>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d814      	bhi.n	80035da <UART_SetConfig+0x1a2>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <UART_SetConfig+0x182>
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d008      	beq.n	80035ca <UART_SetConfig+0x192>
 80035b8:	e00f      	b.n	80035da <UART_SetConfig+0x1a2>
 80035ba:	2300      	movs	r3, #0
 80035bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c0:	e0ad      	b.n	800371e <UART_SetConfig+0x2e6>
 80035c2:	2302      	movs	r3, #2
 80035c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c8:	e0a9      	b.n	800371e <UART_SetConfig+0x2e6>
 80035ca:	2304      	movs	r3, #4
 80035cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d0:	e0a5      	b.n	800371e <UART_SetConfig+0x2e6>
 80035d2:	2308      	movs	r3, #8
 80035d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d8:	e0a1      	b.n	800371e <UART_SetConfig+0x2e6>
 80035da:	2310      	movs	r3, #16
 80035dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e0:	e09d      	b.n	800371e <UART_SetConfig+0x2e6>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a4a      	ldr	r2, [pc, #296]	; (8003710 <UART_SetConfig+0x2d8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d125      	bne.n	8003638 <UART_SetConfig+0x200>
 80035ec:	4b45      	ldr	r3, [pc, #276]	; (8003704 <UART_SetConfig+0x2cc>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035f6:	2bc0      	cmp	r3, #192	; 0xc0
 80035f8:	d016      	beq.n	8003628 <UART_SetConfig+0x1f0>
 80035fa:	2bc0      	cmp	r3, #192	; 0xc0
 80035fc:	d818      	bhi.n	8003630 <UART_SetConfig+0x1f8>
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d00a      	beq.n	8003618 <UART_SetConfig+0x1e0>
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d814      	bhi.n	8003630 <UART_SetConfig+0x1f8>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <UART_SetConfig+0x1d8>
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d008      	beq.n	8003620 <UART_SetConfig+0x1e8>
 800360e:	e00f      	b.n	8003630 <UART_SetConfig+0x1f8>
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e082      	b.n	800371e <UART_SetConfig+0x2e6>
 8003618:	2302      	movs	r3, #2
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e07e      	b.n	800371e <UART_SetConfig+0x2e6>
 8003620:	2304      	movs	r3, #4
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e07a      	b.n	800371e <UART_SetConfig+0x2e6>
 8003628:	2308      	movs	r3, #8
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e076      	b.n	800371e <UART_SetConfig+0x2e6>
 8003630:	2310      	movs	r3, #16
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003636:	e072      	b.n	800371e <UART_SetConfig+0x2e6>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a35      	ldr	r2, [pc, #212]	; (8003714 <UART_SetConfig+0x2dc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d12a      	bne.n	8003698 <UART_SetConfig+0x260>
 8003642:	4b30      	ldr	r3, [pc, #192]	; (8003704 <UART_SetConfig+0x2cc>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003650:	d01a      	beq.n	8003688 <UART_SetConfig+0x250>
 8003652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003656:	d81b      	bhi.n	8003690 <UART_SetConfig+0x258>
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d00c      	beq.n	8003678 <UART_SetConfig+0x240>
 800365e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003662:	d815      	bhi.n	8003690 <UART_SetConfig+0x258>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <UART_SetConfig+0x238>
 8003668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366c:	d008      	beq.n	8003680 <UART_SetConfig+0x248>
 800366e:	e00f      	b.n	8003690 <UART_SetConfig+0x258>
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003676:	e052      	b.n	800371e <UART_SetConfig+0x2e6>
 8003678:	2302      	movs	r3, #2
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367e:	e04e      	b.n	800371e <UART_SetConfig+0x2e6>
 8003680:	2304      	movs	r3, #4
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003686:	e04a      	b.n	800371e <UART_SetConfig+0x2e6>
 8003688:	2308      	movs	r3, #8
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368e:	e046      	b.n	800371e <UART_SetConfig+0x2e6>
 8003690:	2310      	movs	r3, #16
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003696:	e042      	b.n	800371e <UART_SetConfig+0x2e6>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a17      	ldr	r2, [pc, #92]	; (80036fc <UART_SetConfig+0x2c4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d13a      	bne.n	8003718 <UART_SetConfig+0x2e0>
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <UART_SetConfig+0x2cc>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b0:	d01a      	beq.n	80036e8 <UART_SetConfig+0x2b0>
 80036b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b6:	d81b      	bhi.n	80036f0 <UART_SetConfig+0x2b8>
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036bc:	d00c      	beq.n	80036d8 <UART_SetConfig+0x2a0>
 80036be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c2:	d815      	bhi.n	80036f0 <UART_SetConfig+0x2b8>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <UART_SetConfig+0x298>
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036cc:	d008      	beq.n	80036e0 <UART_SetConfig+0x2a8>
 80036ce:	e00f      	b.n	80036f0 <UART_SetConfig+0x2b8>
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d6:	e022      	b.n	800371e <UART_SetConfig+0x2e6>
 80036d8:	2302      	movs	r3, #2
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036de:	e01e      	b.n	800371e <UART_SetConfig+0x2e6>
 80036e0:	2304      	movs	r3, #4
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e6:	e01a      	b.n	800371e <UART_SetConfig+0x2e6>
 80036e8:	2308      	movs	r3, #8
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ee:	e016      	b.n	800371e <UART_SetConfig+0x2e6>
 80036f0:	2310      	movs	r3, #16
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f6:	e012      	b.n	800371e <UART_SetConfig+0x2e6>
 80036f8:	efff69f3 	.word	0xefff69f3
 80036fc:	40008000 	.word	0x40008000
 8003700:	40013800 	.word	0x40013800
 8003704:	40021000 	.word	0x40021000
 8003708:	40004400 	.word	0x40004400
 800370c:	40004800 	.word	0x40004800
 8003710:	40004c00 	.word	0x40004c00
 8003714:	40005000 	.word	0x40005000
 8003718:	2310      	movs	r3, #16
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a9f      	ldr	r2, [pc, #636]	; (80039a0 <UART_SetConfig+0x568>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d17a      	bne.n	800381e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800372c:	2b08      	cmp	r3, #8
 800372e:	d824      	bhi.n	800377a <UART_SetConfig+0x342>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0x300>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800375d 	.word	0x0800375d
 800373c:	0800377b 	.word	0x0800377b
 8003740:	08003765 	.word	0x08003765
 8003744:	0800377b 	.word	0x0800377b
 8003748:	0800376b 	.word	0x0800376b
 800374c:	0800377b 	.word	0x0800377b
 8003750:	0800377b 	.word	0x0800377b
 8003754:	0800377b 	.word	0x0800377b
 8003758:	08003773 	.word	0x08003773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe fcea 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8003760:	61f8      	str	r0, [r7, #28]
        break;
 8003762:	e010      	b.n	8003786 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003764:	4b8f      	ldr	r3, [pc, #572]	; (80039a4 <UART_SetConfig+0x56c>)
 8003766:	61fb      	str	r3, [r7, #28]
        break;
 8003768:	e00d      	b.n	8003786 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800376a:	f7fe fc4b 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 800376e:	61f8      	str	r0, [r7, #28]
        break;
 8003770:	e009      	b.n	8003786 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003776:	61fb      	str	r3, [r7, #28]
        break;
 8003778:	e005      	b.n	8003786 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003784:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80fb 	beq.w	8003984 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	429a      	cmp	r2, r3
 800379c:	d305      	bcc.n	80037aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d903      	bls.n	80037b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037b0:	e0e8      	b.n	8003984 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	2200      	movs	r2, #0
 80037b6:	461c      	mov	r4, r3
 80037b8:	4615      	mov	r5, r2
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	022b      	lsls	r3, r5, #8
 80037c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037c8:	0222      	lsls	r2, r4, #8
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	6849      	ldr	r1, [r1, #4]
 80037ce:	0849      	lsrs	r1, r1, #1
 80037d0:	2000      	movs	r0, #0
 80037d2:	4688      	mov	r8, r1
 80037d4:	4681      	mov	r9, r0
 80037d6:	eb12 0a08 	adds.w	sl, r2, r8
 80037da:	eb43 0b09 	adc.w	fp, r3, r9
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ec:	4650      	mov	r0, sl
 80037ee:	4659      	mov	r1, fp
 80037f0:	f7fc fcf2 	bl	80001d8 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4613      	mov	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003802:	d308      	bcc.n	8003816 <UART_SetConfig+0x3de>
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800380a:	d204      	bcs.n	8003816 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	e0b6      	b.n	8003984 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800381c:	e0b2      	b.n	8003984 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003826:	d15e      	bne.n	80038e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800382c:	2b08      	cmp	r3, #8
 800382e:	d828      	bhi.n	8003882 <UART_SetConfig+0x44a>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <UART_SetConfig+0x400>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800385d 	.word	0x0800385d
 800383c:	08003865 	.word	0x08003865
 8003840:	0800386d 	.word	0x0800386d
 8003844:	08003883 	.word	0x08003883
 8003848:	08003873 	.word	0x08003873
 800384c:	08003883 	.word	0x08003883
 8003850:	08003883 	.word	0x08003883
 8003854:	08003883 	.word	0x08003883
 8003858:	0800387b 	.word	0x0800387b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385c:	f7fe fc6a 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8003860:	61f8      	str	r0, [r7, #28]
        break;
 8003862:	e014      	b.n	800388e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003864:	f7fe fc7c 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8003868:	61f8      	str	r0, [r7, #28]
        break;
 800386a:	e010      	b.n	800388e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386c:	4b4d      	ldr	r3, [pc, #308]	; (80039a4 <UART_SetConfig+0x56c>)
 800386e:	61fb      	str	r3, [r7, #28]
        break;
 8003870:	e00d      	b.n	800388e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003872:	f7fe fbc7 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8003876:	61f8      	str	r0, [r7, #28]
        break;
 8003878:	e009      	b.n	800388e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387e:	61fb      	str	r3, [r7, #28]
        break;
 8003880:	e005      	b.n	800388e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800388c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d077      	beq.n	8003984 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	005a      	lsls	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	441a      	add	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b0f      	cmp	r3, #15
 80038ae:	d916      	bls.n	80038de <UART_SetConfig+0x4a6>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b6:	d212      	bcs.n	80038de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f023 030f 	bic.w	r3, r3, #15
 80038c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	8afb      	ldrh	r3, [r7, #22]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	8afa      	ldrh	r2, [r7, #22]
 80038da:	60da      	str	r2, [r3, #12]
 80038dc:	e052      	b.n	8003984 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038e4:	e04e      	b.n	8003984 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d827      	bhi.n	800393e <UART_SetConfig+0x506>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <UART_SetConfig+0x4bc>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003919 	.word	0x08003919
 80038f8:	08003921 	.word	0x08003921
 80038fc:	08003929 	.word	0x08003929
 8003900:	0800393f 	.word	0x0800393f
 8003904:	0800392f 	.word	0x0800392f
 8003908:	0800393f 	.word	0x0800393f
 800390c:	0800393f 	.word	0x0800393f
 8003910:	0800393f 	.word	0x0800393f
 8003914:	08003937 	.word	0x08003937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003918:	f7fe fc0c 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 800391c:	61f8      	str	r0, [r7, #28]
        break;
 800391e:	e014      	b.n	800394a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003920:	f7fe fc1e 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8003924:	61f8      	str	r0, [r7, #28]
        break;
 8003926:	e010      	b.n	800394a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003928:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <UART_SetConfig+0x56c>)
 800392a:	61fb      	str	r3, [r7, #28]
        break;
 800392c:	e00d      	b.n	800394a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392e:	f7fe fb69 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8003932:	61f8      	str	r0, [r7, #28]
        break;
 8003934:	e009      	b.n	800394a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393a:	61fb      	str	r3, [r7, #28]
        break;
 800393c:	e005      	b.n	800394a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003948:	bf00      	nop
    }

    if (pclk != 0U)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d019      	beq.n	8003984 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	085a      	lsrs	r2, r3, #1
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	441a      	add	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b0f      	cmp	r3, #15
 8003968:	d909      	bls.n	800397e <UART_SetConfig+0x546>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003970:	d205      	bcs.n	800397e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60da      	str	r2, [r3, #12]
 800397c:	e002      	b.n	8003984 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003990:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003994:	4618      	mov	r0, r3
 8003996:	3728      	adds	r7, #40	; 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399e:	bf00      	nop
 80039a0:	40008000 	.word	0x40008000
 80039a4:	00f42400 	.word	0x00f42400

080039a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01a      	beq.n	8003abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa6:	d10a      	bne.n	8003abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003afc:	f7fd f87c 	bl	8000bf8 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d10e      	bne.n	8003b2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f82d 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e023      	b.n	8003b76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d10e      	bne.n	8003b5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f817 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e00d      	b.n	8003b76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b09c      	sub	sp, #112	; 0x70
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8e:	e0a5      	b.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b96:	f000 80a1 	beq.w	8003cdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fd f82d 	bl	8000bf8 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d13e      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e6      	bne.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3308      	adds	r3, #8
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3308      	adds	r3, #8
 8003c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c02:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e5      	bne.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e067      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d04f      	beq.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4a:	d147      	bne.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c54:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
 8003c76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e6      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	613b      	str	r3, [r7, #16]
   return(result);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ca8:	623a      	str	r2, [r7, #32]
 8003caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	69f9      	ldr	r1, [r7, #28]
 8003cae:	6a3a      	ldr	r2, [r7, #32]
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e010      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	f43f af4a 	beq.w	8003b90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3770      	adds	r7, #112	; 0x70
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b097      	sub	sp, #92	; 0x5c
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3a:	d10e      	bne.n	8003d5a <UART_Start_Receive_IT+0x52>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <UART_Start_Receive_IT+0x48>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d4e:	e02d      	b.n	8003dac <UART_Start_Receive_IT+0xa4>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	22ff      	movs	r2, #255	; 0xff
 8003d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d58:	e028      	b.n	8003dac <UART_Start_Receive_IT+0xa4>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10d      	bne.n	8003d7e <UART_Start_Receive_IT+0x76>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <UART_Start_Receive_IT+0x6c>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d72:	e01b      	b.n	8003dac <UART_Start_Receive_IT+0xa4>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	227f      	movs	r2, #127	; 0x7f
 8003d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d7c:	e016      	b.n	8003dac <UART_Start_Receive_IT+0xa4>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d86:	d10d      	bne.n	8003da4 <UART_Start_Receive_IT+0x9c>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <UART_Start_Receive_IT+0x92>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	227f      	movs	r2, #127	; 0x7f
 8003d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d98:	e008      	b.n	8003dac <UART_Start_Receive_IT+0xa4>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	223f      	movs	r2, #63	; 0x3f
 8003d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003da2:	e003      	b.n	8003dac <UART_Start_Receive_IT+0xa4>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2222      	movs	r2, #34	; 0x22
 8003db8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dda:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e5      	bne.n	8003dba <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d107      	bne.n	8003e08 <UART_Start_Receive_IT+0x100>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a24      	ldr	r2, [pc, #144]	; (8003e94 <UART_Start_Receive_IT+0x18c>)
 8003e04:	665a      	str	r2, [r3, #100]	; 0x64
 8003e06:	e002      	b.n	8003e0e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <UART_Start_Receive_IT+0x190>)
 8003e0c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d019      	beq.n	8003e52 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e6      	bne.n	8003e1e <UART_Start_Receive_IT+0x116>
 8003e50:	e018      	b.n	8003e84 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f043 0320 	orr.w	r3, r3, #32
 8003e66:	653b      	str	r3, [r7, #80]	; 0x50
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	69f9      	ldr	r1, [r7, #28]
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e6      	bne.n	8003e52 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	375c      	adds	r7, #92	; 0x5c
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	08004143 	.word	0x08004143
 8003e98:	08003fe3 	.word	0x08003fe3

08003e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b095      	sub	sp, #84	; 0x54
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e6      	bne.n	8003ea4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d118      	bne.n	8003f44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f023 0310 	bic.w	r3, r3, #16
 8003f26:	647b      	str	r3, [r7, #68]	; 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6979      	ldr	r1, [r7, #20]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e6      	bne.n	8003f12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f56:	bf00      	nop
 8003f58:	3754      	adds	r7, #84	; 0x54
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff fa43 	bl	800340c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b088      	sub	sp, #32
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e6      	bne.n	8003f96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff fa0f 	bl	80033f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fda:	bf00      	nop
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b096      	sub	sp, #88	; 0x58
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ff0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff8:	2b22      	cmp	r3, #34	; 0x22
 8003ffa:	f040 8094 	bne.w	8004126 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004004:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004008:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800400c:	b2d9      	uxtb	r1, r3
 800400e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004012:	b2da      	uxtb	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	400a      	ands	r2, r1
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d179      	bne.n	800413a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004056:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800405a:	653b      	str	r3, [r7, #80]	; 0x50
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
 8004066:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800406a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e6      	bne.n	8004046 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	623b      	str	r3, [r7, #32]
   return(result);
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3308      	adds	r3, #8
 8004096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004098:	633a      	str	r2, [r7, #48]	; 0x30
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800409e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d12e      	bne.n	800411e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0310 	bic.w	r3, r3, #16
 80040da:	64bb      	str	r3, [r7, #72]	; 0x48
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	617b      	str	r3, [r7, #20]
   return(result);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b10      	cmp	r3, #16
 8004104:	d103      	bne.n	800410e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2210      	movs	r2, #16
 800410c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004114:	4619      	mov	r1, r3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff f982 	bl	8003420 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800411c:	e00d      	b.n	800413a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fc f9dc 	bl	80004dc <HAL_UART_RxCpltCallback>
}
 8004124:	e009      	b.n	800413a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	8b1b      	ldrh	r3, [r3, #24]
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0208 	orr.w	r2, r2, #8
 8004136:	b292      	uxth	r2, r2
 8004138:	831a      	strh	r2, [r3, #24]
}
 800413a:	bf00      	nop
 800413c:	3758      	adds	r7, #88	; 0x58
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b096      	sub	sp, #88	; 0x58
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004150:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004158:	2b22      	cmp	r3, #34	; 0x22
 800415a:	f040 8094 	bne.w	8004286 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004164:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800416e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004172:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004176:	4013      	ands	r3, r2
 8004178:	b29a      	uxth	r2, r3
 800417a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800417c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	1c9a      	adds	r2, r3, #2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d179      	bne.n	800429a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
 80041c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e6      	bne.n	80041a6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421c:	2b01      	cmp	r3, #1
 800421e:	d12e      	bne.n	800427e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	60bb      	str	r3, [r7, #8]
   return(result);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f023 0310 	bic.w	r3, r3, #16
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e6      	bne.n	8004226 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b10      	cmp	r3, #16
 8004264:	d103      	bne.n	800426e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2210      	movs	r2, #16
 800426c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff f8d2 	bl	8003420 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800427c:	e00d      	b.n	800429a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fc f92c 	bl	80004dc <HAL_UART_RxCpltCallback>
}
 8004284:	e009      	b.n	800429a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	8b1b      	ldrh	r3, [r3, #24]
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0208 	orr.w	r2, r2, #8
 8004296:	b292      	uxth	r2, r2
 8004298:	831a      	strh	r2, [r3, #24]
}
 800429a:	bf00      	nop
 800429c:	3758      	adds	r7, #88	; 0x58
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <__libc_init_array>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	4d0d      	ldr	r5, [pc, #52]	; (80042f0 <__libc_init_array+0x38>)
 80042bc:	4c0d      	ldr	r4, [pc, #52]	; (80042f4 <__libc_init_array+0x3c>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	2600      	movs	r6, #0
 80042c4:	42a6      	cmp	r6, r4
 80042c6:	d109      	bne.n	80042dc <__libc_init_array+0x24>
 80042c8:	4d0b      	ldr	r5, [pc, #44]	; (80042f8 <__libc_init_array+0x40>)
 80042ca:	4c0c      	ldr	r4, [pc, #48]	; (80042fc <__libc_init_array+0x44>)
 80042cc:	f000 f834 	bl	8004338 <_init>
 80042d0:	1b64      	subs	r4, r4, r5
 80042d2:	10a4      	asrs	r4, r4, #2
 80042d4:	2600      	movs	r6, #0
 80042d6:	42a6      	cmp	r6, r4
 80042d8:	d105      	bne.n	80042e6 <__libc_init_array+0x2e>
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e0:	4798      	blx	r3
 80042e2:	3601      	adds	r6, #1
 80042e4:	e7ee      	b.n	80042c4 <__libc_init_array+0xc>
 80042e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ea:	4798      	blx	r3
 80042ec:	3601      	adds	r6, #1
 80042ee:	e7f2      	b.n	80042d6 <__libc_init_array+0x1e>
 80042f0:	08004454 	.word	0x08004454
 80042f4:	08004454 	.word	0x08004454
 80042f8:	08004454 	.word	0x08004454
 80042fc:	08004458 	.word	0x08004458

08004300 <memset>:
 8004300:	4402      	add	r2, r0
 8004302:	4603      	mov	r3, r0
 8004304:	4293      	cmp	r3, r2
 8004306:	d100      	bne.n	800430a <memset+0xa>
 8004308:	4770      	bx	lr
 800430a:	f803 1b01 	strb.w	r1, [r3], #1
 800430e:	e7f9      	b.n	8004304 <memset+0x4>

08004310 <strncmp>:
 8004310:	b510      	push	{r4, lr}
 8004312:	b17a      	cbz	r2, 8004334 <strncmp+0x24>
 8004314:	4603      	mov	r3, r0
 8004316:	3901      	subs	r1, #1
 8004318:	1884      	adds	r4, r0, r2
 800431a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800431e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004322:	4290      	cmp	r0, r2
 8004324:	d101      	bne.n	800432a <strncmp+0x1a>
 8004326:	42a3      	cmp	r3, r4
 8004328:	d101      	bne.n	800432e <strncmp+0x1e>
 800432a:	1a80      	subs	r0, r0, r2
 800432c:	bd10      	pop	{r4, pc}
 800432e:	2800      	cmp	r0, #0
 8004330:	d1f3      	bne.n	800431a <strncmp+0xa>
 8004332:	e7fa      	b.n	800432a <strncmp+0x1a>
 8004334:	4610      	mov	r0, r2
 8004336:	e7f9      	b.n	800432c <strncmp+0x1c>

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
